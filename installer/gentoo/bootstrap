#!/bin/sh -e
# Copyright (c) 2017 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $BOOTSTRAP_RELEASE (if different
# from $RELEASE), $ARCH, and $MIRROR.

# Set the arch if it's not already set
if [ -z $ARCH ]; then
    ARCH="amd64";
fi

# Grab the latest tar file
echo 'Finding latest stage3...' 1>&2
d="http://distfiles.gentoo.org/releases/${ARCH}/autobuilds/current-stage3-${ARCH}/"
f=`curl -s $d | grep -o stage3-${ARCH}-'[0-9]\{8\}'.tar.bz2 | head -n 1`
DIR="${tmp}/${RELEASE}-${ARCH}"
mkdir ${DIR}

LOCALFILE=""
if [ -f "/tmp/$f" ]; then
    LOCALFILE="/tmp/$f"
fi

if [ -z $LOCALFILE ]; then
    echo "Downloading release: ${f}..." 1>&2
    if ! wget -O- --no-verbose --timeout=60 -t2 "$d$f" | tar -C "${DIR}" --strip-components=1 -jx 2>/dev/null; then
        error 1 'Failed to download stage3.'
    fi
else
    echo "Using local file in ${LOCALFILE}..." 1>&2
    if ! cat ${LOCALFILE} | tar -C "${DIR}" --strip-components=1 -jx 2>/dev/null; then
        error 1 "Failed to unpack stage3 from ${LOCALFILE}"
    fi
fi

# Fetch the latest portage tree
p="http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2"
pf="portage-latest.tar.bz2"
mkdir "${DIR}/usr/portage"

LOCALFILE=""
if [ -f "/tmp/${pf}" ]; then
    LOCALFILE="/tmp/${pf}"
fi

if [ -z "${LOCALFILE}" ]; then
    echo "Fetching the portage tree snapshot..." 1>&2
    if ! wget -O- --no-verbose --timeout=60 -t2 $p | tar -C "${DIR}/usr/portage" --strip-components=1 -jx 2>/dev/null; then
        error 1 'Failed to fetch the portage tree.'
    fi
else
    echo "Using the portage tree from ${LOCALFILE}" 1>&2
    if ! cat ${LOCALFILE} | tar -C "${DIR}/usr/portage" --strip-components=1 -jx; then
        error 1 'Failed to unpack portage tree from /tmp'
    fi
fi

# If we're using a 64 bit x86 arch, build for both x86 and amd64
if [ ${ARCH} = 'amd64' ]; then
    echo 'ABI_X86="32 64"' >> ${DIR}/etc/portage/make.conf
fi

# Set beter cflags
sed -i 's/CFLAGS="-O2 -pipe"/CFLAGS="-O2 -pipe -march=native -mtune=native"/' ${DIR}/etc/portage/make.conf

# Set better make opts
CORE_COUNT=`cat /proc/cpuinfo  | grep processor | wc -l`
J_COUNT=`expr ${CORE_COUNT} + 1`
echo "MAKEOPTS=\"-j${J_COUNT}\"" >> ${DIR}/etc/portage/make.conf
